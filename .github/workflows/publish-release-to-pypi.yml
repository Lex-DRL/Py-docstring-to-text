# Prerequisites:
#
# - In GitHub repo - create the publishing environment (here, `pypi` / `testpypi`)
#   https://docs.github.com/en/actions/how-tos/deploy/configure-and-manage-deployments/manage-environments
#
# - Create a "Trusted Publisher" in the project settings on (test)PyPI
#   https://docs.pypi.org/trusted-publishers/adding-a-publisher/
#   https://pypi.org/manage/project/docstring-to-text/settings/publishing/

# Tutorials:
# https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
# https://www.youtube.com/watch?v=NMQwzI9hprg
# https://github.com/ArjanCodes/moneysnake/blob/main/.github/workflows/release.yaml

name: Publish Python üêç distribution üì¶ to PyPI

# ======= TRIGGERS =======

on:
  push:
    tags:
      # Trigger on tags with '[v]<int>.<int>whatever' pattern: 'v1.0.0', 'v2.1.4', etc
      # https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#filter-pattern-cheat-sheet
      # https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#onpushbranchestagsbranches-ignoretags-ignore
      - 'v[0-9]+.[0-9]**'
      - '[0-9]+.[0-9]**'

# ======= ENV VARS =======

env:
  # The name on PyPI:
  PACKAGE_NAME: 'docstring-to-text'

# ========= JOBS =========

jobs:

  parse-tag:
    # https://emojidb.org/query-emojis
    name: Detect version from tag üî¢
    if: ${{ github.repository_owner == 'Lex-DRL' }}
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.parse.outputs.new_version }}
      suffix: ${{ steps.parse.outputs.suffix }}
      tag_name: ${{ steps.parse.outputs.tag_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to avoid issues with tags and branches

      - name: Parse tag into Version and Suffix
        id: parse
        # `$GITHUB_REF`: contains something like 'refs/tags/v1.2.3-alpha1'
        # `${GITHUB_REF#refs/tags/}`: ${var#prefix} - query $GITHUB_REF, remove 'refs/tags/' prefix
        # The main magic happens in regexps...
        # - `grep -qP`: verify that the tag matches the given pattern
        # - `sed -E 's/regex_pattern/replacement/optional_flags'`, with '\1' in replacement meaning first group
        # The regexp itself:
        # - '^v?([0-9]+\.[0-9]+\.[0-9]+)' - matches 'v1.2.3' / '1.2.3' from start of the string, 'v' stripped
        #   - '^' - start of the input string.
        #   - 'v?(...)' - optional 'v' prefix (might be missing), and what follows is captured as a group.
        #   - '[0-9]+' - a sequence of 1 or more digits.
        #   - '\.' - literal dot (just '.' matches any character).
        # - '(-.+)?$' - suffix captured as a group:
        #   - '-' - just a hyphen.
        #   - '.+' - any non-empty string (at least one any character - including another hyphen, dot or digit).
        #   - '(...)?$' - a group that might be present or not.
        #   - '$' - the end of the input string.
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "Tag name: $TAG_NAME"
            if echo "$TAG_NAME" | grep -qP '^v?[0-9]+\.[0-9]+\.[0-9]+(-.+)?$'; then
              NEW_VERSION=$(echo "$TAG_NAME" | sed -E 's/^v?([0-9]+\.[0-9]+\.[0-9]+)(-.+)?$/\1/')
              echo "Version: $NEW_VERSION"
              if echo "$TAG_NAME" | grep -q '-'; then
                # We can only get into this branch if the initial grep regex worked AND '-' is there
                # So it's '[v]1.2.3-something'
                SUFFIX=$(echo "$TAG_NAME" | sed -E 's/^v?([0-9]+\.[0-9]+\.[0-9]+)-(.+)$/\2/')
                if echo "$SUFFIX" | grep -q '-'; then
                  echo "Invalid suffix (it contains hyphen): $SUFFIX" >&2
                  exit 1
                fi
              else
                SUFFIX=""
              fi
              echo "Suffix: $SUFFIX"
            else
              echo "Tag doesn't match the '[v]1.2.3[-suffix]' pattern: $TAG_NAME" >&2
              exit 1
            fi
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
          else
            echo "No tag found" >&2
            exit 1
          fi

  # --------------------------------------------------------

  build:
    name: Build distribution üì¶
    needs: [parse-tag]  # No need to even try, if we failed tag parsing
    # Just to be nice - let's check the GitHub user and prevent unwanted auto-runs on forks made solely for a PR.
    if: >-
      github.repository_owner == 'Lex-DRL'
    # Second condition: only run on tag pushes...
    # It was in the template from official tutorial, but it got redundant, since the only trigger is `on.push.tags`
    #  && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user

    - name: Build a binary wheel and a source tarball
      run: python3 -m build

    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  # --------------------------------------------------------

#  publish-to-pypi:
#    name: >-
#      Publish Python üêç distribution üì¶ to PyPI ‚¨ÜÔ∏è
#    if: ${{ github.repository_owner == 'Lex-DRL' }}
#    needs:
#    - build  # Requires the previous 'build' job to succeed
#    runs-on: ubuntu-latest
#
#    environment:
#      name: pypi
#      url: https://pypi.org/p/${{ env.PACKAGE_NAME }}
#    permissions:
#      id-token: write  # IMPORTANT: mandatory for trusted publishing
#
#    steps:
#    - name: Download all the dists
#      uses: actions/download-artifact@v4
#      with:
#        name: python-package-distributions
#        path: dist/
#
#    - name: Publish distribution üì¶ to PyPI
#      uses: pypa/gh-action-pypi-publish@release/v1

  # --------------------------------------------------------

#  publish-to-testpypi:
#    name: Publish Python üêç distribution üì¶ to TestPyPI ‚ùó
#    if: ${{ github.repository_owner == 'Lex-DRL' }}
#    needs:
#    - build  # Requires the previous 'build' job to succeed
#    runs-on: ubuntu-latest
#
#    environment:
#      #name: testpypi
#      # Yes, it's "not cool" to use the same environment for testing and publishing,
#      # but in this particular repo I only use the TestPyPI for initial debugging of the workflow
#      name: pypi
#      url: https://test.pypi.org/p/${{ env.PACKAGE_NAME }}
#    permissions:
#      id-token: write  # IMPORTANT: mandatory for trusted publishing
#
#    steps:
#    - name: Download all the dists
#      uses: actions/download-artifact@v4
#      with:
#        name: python-package-distributions
#        path: dist/
#
#    - name: Publish distribution üì¶ to TestPyPI
#      uses: pypa/gh-action-pypi-publish@release/v1
#      with:
#        repository-url: https://test.pypi.org/legacy/

  # --------------------------------------------------------

  github_release:
      name: Create GitHub Release üîÑ
      needs: [build, parse-tag]
      runs-on: ubuntu-latest
      permissions:
        contents: write
      steps:
        - name: Checkout Code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0 # Fetch full history to avoid issues with tags and branches

        - name: Download artifacts
          uses: actions/download-artifact@v4
          with:
            name: python-package-distributions
            path: dist/

        - name: Create GitHub Release
          id: create_release
          env:
            GH_TOKEN: ${{ github.token }}
          run: >-
            gh release create
            ${{ needs.parse-tag.outputs.tag_name }}
            dist/*
            --title ${{ needs.parse-tag.outputs.tag_name }}
            --generate-notes
